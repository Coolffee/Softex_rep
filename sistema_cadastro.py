# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySyFUMVBuxr3CaeGY0ooSggo8wqq6w0z
"""

import os
import json
from typing import List
from enum import Enum
from IPython.display import clear_output

class ErrorCodes(Enum):
    SUCCESS = 0
    ALUNO_NOT_FOUND = 1
    MATRICULA_EXISTS = 2
    INVALID_NOTA = 3
    NO_ALUNOS = 4
    INVALID_OPTION = 5

class Aluno:
    def __init__(self, nome: str, matricula: int, curso: str, media: float, notas: List[float] = None,) -> None:
        self.__nome = nome
        self.__matricula = matricula
        self.__curso = curso
        self.__notas = notas if notas is not None else []
        self.__media = media


    @property
    def nome(self):
        return self.__nome

    @nome.setter
    def nome(self, value):
        self.__nome = value

    @property
    def matricula(self):
        return self.__matricula

    @matricula.setter
    def matricula(self, value):
        self.__matricula = value

    @property
    def curso(self):
        return self.__curso
    
    @curso.setter
    def curso(self, value):
        self.__curso = value

    @property
    def notas(self):
        return self.__notas

    @notas.setter
    def notas(self, value):
        self.__notas = value
        self.__media = sum(self.__notas) / len(self.__notas) if self.__notas else 0

    @property
    def media(self):
        return self.__media

    def to_dict(self):
        return {
            "nome": self.__nome,
            "matricula": self.__matricula,
            "curso": self.__curso,
            "notas": self.__notas,
            "media": self.__media
        }

    def __repr__(self):
        return (f"Nome: {self.__nome}\n"
                f"Matrícula: {self.__matricula}\n"
                f"Curso: {self.__curso}\n"
                f"Notas: {self.__notas}\n"
                f"Media: {self.__media:.2f}\n" + "="*10)

class SistemaDeCadastro:
    def __init__(self):
        self.__alunos = []
        self.__filename = "alunos.json"
        self.carregar_alunos()

    def cadastrar_aluno(self):
        while True:
            nome = input("Digite o nome do aluno: ")
            matricula = validar_matricula()
            curso = input("Digite o curso do aluno: ")
            notas = []

            while True:
                nota = validar_notas()
                if nota == -1:
                    break
                elif nota < 0 or nota > 10:
                    print(f"Erro: {ErrorCodes.INVALID_NOTA.name}. As notas devem estar entre 0 e 10!")
                    continue
                notas.append(nota)

            media = sum(notas) / len(notas) if notas else 0

            if any(aluno.matricula == matricula for aluno in self.__alunos):
                print(f"Erro: {ErrorCodes.MATRICULA_EXISTS.name}. Matricula já existe!")
                return ErrorCodes.MATRICULA_EXISTS
            else:
                novo_aluno = Aluno(nome, matricula, curso, media, notas)
                self.__alunos.append(novo_aluno)
                print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Aluno cadastrado!")
                self.salvar_alunos()
                return ErrorCodes.SUCCESS

    def listar_alunos(self):
        if not self.__alunos:
            print(f"Erro: {ErrorCodes.NO_ALUNOS.name}. Nenhum aluno cadastrado")
            return ErrorCodes.NO_ALUNOS
        else:
            for aluno in self.__alunos:
                print(aluno)
            return ErrorCodes.SUCCESS

    def buscar(self, matricula: int):
        aluno = next((aluno for aluno in self.__alunos if aluno.matricula == matricula), None)
        if aluno:
            return ErrorCodes.SUCCESS, aluno
        return ErrorCodes.ALUNO_NOT_FOUND, None

    def excluir(self, matricula: int):
        status, aluno = self.buscar(matricula)
        if status == ErrorCodes.SUCCESS:
            self.__alunos.remove(aluno)
            print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Aluno com a matricula {matricula} foi excluido!")
            self.salvar_alunos()
            return ErrorCodes.SUCCESS
        else:
            print(f"Erro: {ErrorCodes.ALUNO_NOT_FOUND.name}. Aluno com a matricula {matricula} não encontrado.")
            return ErrorCodes.ALUNO_NOT_FOUND

    def editar(self, matricula: int):
        status, aluno = self.buscar(matricula)
        if status == ErrorCodes.SUCCESS:
            while True:
                print("===Opção que deseja alterar===")
                print("==[1] Nome")
                print("==[2] Matricula")
                print("==[3] Curso")
                print("==[4] Notas")
                print("==[0] Sair")
                while True:
                    opcao_a = input("Selecione: ")
                    try:
                        opcao_a = int(opcao_a)
                        break
                    except ValueError:
                        print("Deve ser um número!")

                if opcao_a == 0:
                    break
                elif opcao_a == 1:
                    aluno.nome = input("Novo nome: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Nome alterado com sucesso!")
                elif opcao_a == 2:
                    n_matricula = validar_matricula()
                    if any(a.matricula == n_matricula for a in self.__alunos):
                        print(f"Erro: {ErrorCodes.MATRICULA_EXISTS.name}. A matrícula já existe!")
                    else:
                        aluno.matricula = n_matricula
                        print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Matricula alterada com sucesso!")
                elif opcao_a == 3:
                    aluno.curso = input("Novo curso: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Curso alterado com sucesso!")
                elif opcao_a == 4:
                    notas = []
                    while True:
                        nota = validar_notas()
                        if nota == -1:
                            break
                        elif nota < 0 or nota > 10:
                            print(f"Erro: {ErrorCodes.INVALID_NOTA.name}. As notas devem estar entre 0 e 10!")
                            continue
                        notas.append(nota)
                    aluno.notas = notas
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Notas alteradas com sucesso!")
                else:
                    print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida!")
            self.salvar_alunos()
            return ErrorCodes.SUCCESS
        else:
            print(f"Erro: {ErrorCodes.ALUNO_NOT_FOUND.name}. Aluno não encontrado!")
            return ErrorCodes.ALUNO_NOT_FOUND

    def salvar_alunos(self):
        with open(self.__filename, 'w') as f:
            json.dump([aluno.to_dict() for aluno in self.__alunos], f)

    def carregar_alunos(self):
        if os.path.exists(self.__filename):
            with open(self.__filename, 'r') as f:
                data = json.load(f)
                self.__alunos = [Aluno(**aluno_data) for aluno_data in data]

def exibir_menu():
    os.system('cls' if os.name == 'nt' else 'clear')
    print("""
    ╔══════════════════════════════╗
    ║     Sistema de Cadastro      ║
    ╠══════════════════════════════╣
    ║ [1] Cadastrar aluno          ║
    ║ [2] Listar alunos            ║
    ║ [3] Buscar aluno             ║
    ║ [4] Excluir aluno            ║
    ║ [5] Editar aluno             ║
    ║ [0] Sair                     ║
    ╚══════════════════════════════╝
    """)

def validar_matricula():
    while True:
        matricula = input("Digite a matrícula do aluno: ")
        try:
            return int(matricula)
        except ValueError:
            print("A matrícula deve conter apenas números! Tente novamente.")

def validar_notas():
    while True:
        nota = input("Digite uma nota ou -1 para sair: ")
        try:
            return int(nota)
        except ValueError:
            print("As notas devem ser apenas números!")

sistema = SistemaDeCadastro()

while True:
    exibir_menu()
    opcao = input("Escolha uma opção: ")
    try: 
        opcao = int(opcao)
    except ValueError:
        print("Deve ser um número")
        input("Pressione Enter para continuar...")
        continue
    match opcao:
        case 0:
            break
        case 1:
            sistema.cadastrar_aluno()
        case 2:
            sistema.listar_alunos()
        case 3:
            matricula = validar_matricula()
            status, aluno = sistema.buscar(matricula)
            if status == ErrorCodes.SUCCESS:
                print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Aluno encontrado!")
                print(aluno)
            else:
                print(f"Erro: {ErrorCodes.ALUNO_NOT_FOUND.name}. Aluno não encontrado")
        case 4:
            matricula = validar_matricula()
            sistema.excluir(matricula)
        case 5:
            matricula = validar_matricula()
            sistema.editar(matricula)
        case _:
            print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida")

    input("\nPressione Enter para continuar...")
    clear_output()
    

