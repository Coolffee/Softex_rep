# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ySyFUMVBuxr3CaeGY0ooSggo8wqq6w0z
"""

import os
import json
from typing import List
from enum import Enum
from IPython.display import clear_output

class ErrorCodes(Enum):
    SUCCESS = 0
    ALUNO_NOT_FOUND = 1
    MATRICULA_EXISTS = 2
    INVALID_NOTA = 3
    NO_ALUNOS = 4
    INVALID_OPTION = 5
    FUNCIONARIO_NOT_FOUND = 6
    FUNCIONARIO_EXISTS = 7

class Cadastrado:
    def __init__(self, nome: str, matricula: int):
        self.__nome = nome
        self.__matricula = matricula

    @property
    def nome(self):
        return self.__nome

    @nome.setter
    def nome(self, value):
        self.__nome = value

    @property
    def matricula(self):
        return self.__matricula

    @matricula.setter
    def matricula(self, value):
        self.__matricula = value

    def to_dict(self):
        return {
            "nome": self.__nome,
            "matricula": self.__matricula
        }

    def __repr__(self):
        return f"Nome: {self.__nome}\nMatrícula: {self.__matricula}\n" + "="*10

class Aluno(Cadastrado):
    def __init__(self, nome: str, matricula: int, curso: str, notas: List[float] = None):
        super().__init__(nome, matricula)
        self.__curso = curso
        self.__notas = notas if notas is not None else []
        self.__media = sum(self.__notas) / len(self.__notas) if self.__notas else 0

    @property
    def curso(self):
        return self.__curso

    @curso.setter
    def curso(self, value):
        self.__curso = value

    @property
    def notas(self):
        return self.__notas

    @notas.setter
    def notas(self, value):
        self.__notas = value
        self.__media = sum(self.__notas) / len(self.__notas) if self.__notas else 0

    @property
    def media(self):
        return self.__media

    def to_dict(self):
        data = super().to_dict()
        data.update({
            "curso": self.__curso,
            "notas": self.__notas,
            "media": self.__media
        })
        return data

    def __repr__(self):
        return (super().__repr__() +
                f"Curso: {self.__curso}\n"
                f"Notas: {self.__notas}\n"
                f"Media: {self.__media:.2f}\n" + "="*10)

class Funcionario(Cadastrado):
    def __init__(self, nome: str, matricula: int, departamento: str):
        super().__init__(nome, matricula)
        self.__departamento = departamento

    @property
    def departamento(self):
        return self.__departamento

    @departamento.setter
    def departamento(self, value):
        self.__departamento = value

    def to_dict(self):
        data = super().to_dict()
        data.update({
            "departamento": self.__departamento
        })
        return data

    def __repr__(self):
        return (super().__repr__() +
                f"Departamento: {self.__departamento}\n" + "="*10)

class Administrativo(Funcionario):
    def __init__(self, nome: str, matricula: int, departamento: str):
        super().__init__(nome, matricula, departamento)

class Professor(Funcionario):
    def __init__(self, nome: str, matricula: int, departamento: str, disciplina: str):
        super().__init__(nome, matricula, departamento)
        self.__disciplina = disciplina

    @property
    def disciplina(self):
        return self.__disciplina

    @disciplina.setter
    def disciplina(self, value):
        self.__disciplina = value

    def to_dict(self):
        data = super().to_dict()
        data.update({
            "disciplina": self.__disciplina
        })
        return data

    def __repr__(self):
        return (super().__repr__() +
                f"Disciplina: {self.__disciplina}\n" + "="*10)

class SistemaDeCadastro:
    def __init__(self):
        self.__alunos = []
        self.__funcionarios = []
        self.__filename_alunos = "alunos.json"
        self.__filename_funcionarios = "funcionarios.json"
        self.carregar_alunos()
        self.carregar_funcionarios()

    def cadastrar_aluno(self):
        while True:
            nome = input("Digite o nome do aluno: ")
            matricula = int(input("Digite a matrícula do aluno: "))
            curso = input("Digite o curso do aluno: ")
            notas = []

            while True:
                nota = int(input("Digite uma nota ou -1 para sair: "))
                if nota == -1:
                    break
                elif nota < 0 or nota > 10:
                    print(f"Erro: {ErrorCodes.INVALID_NOTA.name}. As notas devem estar entre 0 e 10!")
                    continue
                notas.append(nota)

            media = sum(notas) / len(notas) if notas else 0

            if any(aluno.matricula == matricula for aluno in self.__alunos):
                print(f"Erro: {ErrorCodes.MATRICULA_EXISTS.name}. Matrícula já existe!")
                return ErrorCodes.MATRICULA_EXISTS
            else:
                novo_aluno = Aluno(nome, matricula, curso, notas)
                self.__alunos.append(novo_aluno)
                print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Aluno cadastrado!")
                self.salvar_alunos()
                return ErrorCodes.SUCCESS

    def listar_alunos(self):
        if not self.__alunos:
            print(f"Erro: {ErrorCodes.NO_ALUNOS.name}. Nenhum aluno cadastrado")
            return ErrorCodes.NO_ALUNOS
        else:
            for aluno in self.__alunos:
                print(aluno)
            return ErrorCodes.SUCCESS

    def buscar_aluno(self, matricula: int):
        aluno = next((aluno for aluno in self.__alunos if aluno.matricula == matricula), None)
        if aluno:
            return ErrorCodes.SUCCESS, aluno
        return ErrorCodes.ALUNO_NOT_FOUND, None

    def excluir_aluno(self, matricula: int):
        status, aluno = self.buscar_aluno(matricula)
        if status == ErrorCodes.SUCCESS:
            self.__alunos.remove(aluno)
            print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Aluno com a matrícula {matricula} foi excluído!")
            self.salvar_alunos()
            return ErrorCodes.SUCCESS
        else:
            print(f"Erro: {ErrorCodes.ALUNO_NOT_FOUND.name}. Aluno com a matrícula {matricula} não encontrado.")
            return ErrorCodes.ALUNO_NOT_FOUND

    def editar_aluno(self, matricula: int):
        status, aluno = self.buscar_aluno(matricula)
        if status == ErrorCodes.SUCCESS:
            while True:
                print("===Opção que deseja alterar===")
                print("==[1] Nome")
                print("==[2] Matrícula")
                print("==[3] Curso")
                print("==[4] Notas")
                print("==[0] Sair")
                opcao_a = int(input("Selecione: "))
                if opcao_a == 0:
                    break
                elif opcao_a == 1:
                    aluno.nome = input("Novo nome: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Nome alterado com sucesso!")
                elif opcao_a == 2:
                    n_matricula = int(input("Nova matrícula: "))
                    if any(a.matricula == n_matricula for a in self.__alunos):
                        print(f"Erro: {ErrorCodes.MATRICULA_EXISTS.name}. A matrícula já existe!")
                    else:
                        aluno.matricula = n_matricula
                        print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Matrícula alterada com sucesso!")
                elif opcao_a == 3:
                    aluno.curso = input("Novo curso: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Curso alterado com sucesso!")
                elif opcao_a == 4:
                    notas = []
                    while True:
                        nota = int(input("Digite uma nota ou -1 para sair: "))
                        if nota == -1:
                            break
                        elif nota < 0 or nota > 10:
                            print(f"Erro: {ErrorCodes.INVALID_NOTA.name}. As notas devem estar entre 0 e 10!")
                            continue
                        notas.append(nota)
                    aluno.notas = notas
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Notas alteradas com sucesso!")
                else:
                    print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida!")
            self.salvar_alunos()
            return ErrorCodes.SUCCESS
        else:
            print(f"Erro: {ErrorCodes.ALUNO_NOT_FOUND.name}. Aluno não encontrado!")
            return ErrorCodes.ALUNO_NOT_FOUND

    def salvar_alunos(self):
        with open(self.__filename_alunos, 'w') as f:
            json.dump([aluno.to_dict() for aluno in self.__alunos], f)

    def carregar_alunos(self):
        if os.path.exists(self.__filename_alunos):
            with open(self.__filename_alunos, 'r') as f:
                data = json.load(f)
                self.__alunos = [Aluno(**aluno_data) for aluno_data in data]

    def cadastrar_funcionario(self):
        while True:
            nome = input("Digite o nome do funcionário: ")
            matricula = int(input("Digite a matrícula do funcionário: "))
            departamento = input("Digite o departamento do funcionário (Administração ou Professores): ")

            if departamento.lower() == "administração":
                funcionario = Administrativo(nome, matricula, departamento)
            elif departamento.lower() == "professores":
                disciplina = input("Digite a disciplina do professor: ")
                funcionario = Professor(nome, matricula, departamento, disciplina)
            else:
                print(f"Erro: Departamento inválido!")
                return ErrorCodes.INVALID_OPTION

            if any(f.matricula == matricula for f in self.__funcionarios):
                print(f"Erro: {ErrorCodes.FUNCIONARIO_EXISTS.name}. Matrícula já existe!")
                return ErrorCodes.FUNCIONARIO_EXISTS
            else:
                self.__funcionarios.append(funcionario)
                print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Funcionário cadastrado!")
                self.salvar_funcionarios()
                return ErrorCodes.SUCCESS

    def listar_funcionarios(self):
        if not self.__funcionarios:
            print(f"Erro: {ErrorCodes.NO_ALUNOS.name}. Nenhum funcionário cadastrado")
            return ErrorCodes.NO_ALUNOS
        else:
            for funcionario in self.__funcionarios:
                print(funcionario)
            return ErrorCodes.SUCCESS

    def buscar_funcionario(self, matricula: int):
        funcionario = next((funcionario for funcionario in self.__funcionarios if funcionario.matricula == matricula), None)
        if funcionario:
            return ErrorCodes.SUCCESS, funcionario
        return ErrorCodes.FUNCIONARIO_NOT_FOUND, None

    def excluir_funcionario(self, matricula: int):
        status, funcionario = self.buscar_funcionario(matricula)
        if status == ErrorCodes.SUCCESS:
            self.__funcionarios.remove(funcionario)
            print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Funcionário com a matrícula {matricula} foi excluído!")
            self.salvar_funcionarios()
            return ErrorCodes.SUCCESS
        else:
            print(f"Erro: {ErrorCodes.FUNCIONARIO_NOT_FOUND.name}. Funcionário com a matrícula {matricula} não encontrado.")
            return ErrorCodes.FUNCIONARIO_NOT_FOUND

    def editar_funcionario(self, matricula: int):
        status, funcionario = self.buscar_funcionario(matricula)
        if status == ErrorCodes.SUCCESS:
            while True:
                print("===Opção que deseja alterar===")
                print("==[1] Nome")
                print("==[2] Matrícula")
                print("==[3] Departamento")
                if isinstance(funcionario, Professor):
                    print("==[4] Disciplina")
                print("==[0] Sair")
                opcao_f = int(input("Selecione: "))
                if opcao_f == 0:
                    break
                elif opcao_f == 1:
                    funcionario.nome = input("Novo nome: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Nome alterado com sucesso!")
                elif opcao_f == 2:
                    n_matricula = int(input("Nova matrícula: "))
                    if any(f.matricula == n_matricula for f in self.__funcionarios):
                        print(f"Erro: {ErrorCodes.FUNCIONARIO_EXISTS.name}. A matrícula já existe!")
                    else:
                        funcionario.matricula = n_matricula
                        print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Matrícula alterada com sucesso!")
                elif opcao_f == 3:
                    funcionario.departamento = input("Novo departamento: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Departamento alterado com sucesso!")
                elif opcao_f == 4 and isinstance(funcionario, Professor):
                    funcionario.disciplina = input("Nova disciplina: ")
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Disciplina alterada com sucesso!")
                else:
                    print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida!")
            self.salvar_funcionarios()
            return ErrorCodes.SUCCESS
        else:
            print(f"Erro: {ErrorCodes.FUNCIONARIO_NOT_FOUND.name}. Funcionário não encontrado!")
            return ErrorCodes.FUNCIONARIO_NOT_FOUND

    def salvar_funcionarios(self):
        with open(self.__filename_funcionarios, 'w') as f:
            json.dump([funcionario.to_dict() for funcionario in self.__funcionarios], f)

    def carregar_funcionarios(self):
        if os.path.exists(self.__filename_funcionarios):
            with open(self.__filename_funcionarios, 'r') as f:
                data = json.load(f)
                self.__funcionarios = []
                for funcionario_data in data:
                    if funcionario_data["departamento"] == "Administração":
                        self.__funcionarios.append(Administrativo(**funcionario_data))
                    elif funcionario_data["departamento"] == "Professores":
                        self.__funcionarios.append(Professor(**funcionario_data))

def exibir_menu_alunos():
    clear_output()
    print("""
    ╔══════════════════════════════╗
    ║        Menu de Alunos        ║
    ╠══════════════════════════════╣
    ║ [1] Cadastrar aluno          ║
    ║ [2] Listar alunos            ║
    ║ [3] Buscar aluno             ║
    ║ [4] Excluir aluno            ║
    ║ [5] Editar aluno             ║
    ║ [0] Sair                     ║
    ╚══════════════════════════════╝
    """)

def exibir_menu_funcionarios():
    clear_output()
    print("""
    ╔══════════════════════════════╗
    ║     Menu de Funcionários     ║
    ╠══════════════════════════════╣
    ║ [1] Cadastrar funcionário    ║
    ║ [2] Listar funcionários      ║
    ║ [3] Buscar funcionário       ║
    ║ [4] Excluir funcionário      ║
    ║ [5] Editar funcionário       ║
    ║ [0] Voltar                   ║
    ╚══════════════════════════════╝
    """)

def exibir_menu_departamentos():
    clear_output()
    print("""
    ╔══════════════════════════════╗
    ║        Departamentos         ║
    ╠══════════════════════════════╣
    ║ [1] Administrativo           ║
    ║ [2] Professores              ║
    ║ [0] Voltar                   ║
    ╚══════════════════════════════╝
    """)

sistema = SistemaDeCadastro()

while True:
    clear_output()
    print("""
    ╔══════════════════════════════╗
    ║     Sistema de Cadastro      ║
    ╠══════════════════════════════╣
    ║ [1] Menu de Alunos           ║
    ║ [2] Menu de Funcionários     ║
    ║ [0] Sair                     ║
    ╚══════════════════════════════╝
    """)
    opcao = input("Escolha uma opção: ")

    if opcao == '0':
        break
    elif opcao == '1':
        while True:
            exibir_menu_alunos()
            opcao_aluno = input("Escolha uma opção: ")
            if opcao_aluno == '0':
                break
            elif opcao_aluno == '1':
                sistema.cadastrar_aluno()
            elif opcao_aluno == '2':
                sistema.listar_alunos()
            elif opcao_aluno == '3':
                matricula = int(input("Matrícula do aluno: "))
                status, aluno = sistema.buscar_aluno(matricula)
                if status == ErrorCodes.SUCCESS:
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Aluno encontrado!")
                    print(aluno)
                else:
                    print(f"Erro: {ErrorCodes.ALUNO_NOT_FOUND.name}. Aluno não encontrado")
            elif opcao_aluno == '4':
                matricula = int(input("Matrícula do aluno que deseja excluir: "))
                sistema.excluir_aluno(matricula)
            elif opcao_aluno == '5':
                matricula = int(input("Matrícula do aluno que deseja editar: "))
                sistema.editar_aluno(matricula)
            else:
                print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida")
            input("\nPressione Enter para continuar...")

    elif opcao == '2':
        while True:
            exibir_menu_funcionarios()
            opcao_funcionario = input("Escolha uma opção: ")
            if opcao_funcionario == '0':
                break
            elif opcao_funcionario == '1':
                while True:
                    exibir_menu_departamentos()
                    opcao_departamento = input("Escolha um departamento: ")
                    if opcao_departamento == '0':
                        break
                    elif opcao_departamento == '1':
                        sistema.cadastrar_funcionario()
                    elif opcao_departamento == '2':
                        sistema.cadastrar_funcionario()
                    else:
                        print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Departamento inválido!")
                    input("\nPressione Enter para continuar...")
            elif opcao_funcionario == '2':
                sistema.listar_funcionarios()
            elif opcao_funcionario == '3':
                matricula = int(input("Matrícula do funcionário: "))
                status, funcionario = sistema.buscar_funcionario(matricula)
                if status == ErrorCodes.SUCCESS:
                    print(f"Sucesso: {ErrorCodes.SUCCESS.name}. Funcionário encontrado!")
                    print(funcionario)
                else:
                    print(f"Erro: {ErrorCodes.FUNCIONARIO_NOT_FOUND.name}. Funcionário não encontrado")
            elif opcao_funcionario == '4':
                matricula = int(input("Matrícula do funcionário que deseja excluir: "))
                sistema.excluir_funcionario(matricula)
            elif opcao_funcionario == '5':
                matricula = int(input("Matrícula do funcionário que deseja editar: "))
                sistema.editar_funcionario(matricula)
            else:
                print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida")
            input("\nPressione Enter para continuar...")
    else:
        print(f"Erro: {ErrorCodes.INVALID_OPTION.name}. Opção inválida")
    input("\nPressione Enter para continuar...")